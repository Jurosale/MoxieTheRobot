topic: ~DM_Debug keep repeat []

# grabs the specified mission and part (for fetch missions) and attempts to load it (if it exists)
u: THIS_MISSION (debug * mission * _~integer * _~integer)
    ^clearmarkup()
    ^refine()
    a: (first)
        $DMJSON.MissionSet = _0
        $DMJSON.MissionIDX = _1
        $DMJSON.currentContentID = ^pickDBEntry(DM_Index content_id Week $DMJSON.MissionSet MissionIDX $DMJSON.MissionIDX * *)
        $DMJSON.Type = FETCH1
        $DMJSON.State = INITIALIZED
        ^DM_missionMUX()

    a: (second)
        $DMJSON.MissionSet = _0
        $DMJSON.MissionIDX = _1
        $DMJSON.currentContentID = ^pickDBEntry(DM_Index content_id Week $DMJSON.MissionSet MissionIDX $DMJSON.MissionIDX * *)
        $DMJSON.Type = FETCH2
        $DMJSON.State = INITIALIZED
        ^DM_missionMUX()

    a: ()
        $DMJSON.MissionSet = _0
        $DMJSON.MissionIDX = _1
        $DMJSON.Type = ^pickDBEntry(DM_Index MissionType Week $DMJSON.MissionSet MissionIDX $DMJSON.MissionIDX * *)
        $DMJSON.currentContentID = ^pickDBEntry(DM_Index content_id Week $DMJSON.MissionSet MissionIDX $DMJSON.MissionIDX * *)
        $DMJSON.State = INITIALIZED
        ^DM_missionMUX()

u: NEXT_MISSION (debug next mission)
    ^module_complete(DM $DMJSON.currentContentID null $DMJSON.currentScheduleID) # complete current mission, if it exists
    $boMenuJSON.contentDay = ^increment_content_day() # jump to next content day
    $DMJSON.currentContentID = ^get_next_content_id(DM) # grab oldest available mission, if we have one
    # if we have an available mission, load it up and offer the mission    
    if ($DMJSON.currentContentID != null){
        ^DM_Constructor()
        ^DM_missionMUX()
    }
    # else, moxie will inform user that there currently are no available missions
    else{
        content day $boMenuJSON.contentDay does not contain a misison. try this command again to check the next content day.
    }

u: NEXT_SET (debug next set)
    $_currThemeSet = $DMJSON.MissionSet # lets us know what current theme set we're on
    $_callMission = false
    ^loop() {
        ^module_complete(DM $DMJSON.currentContentID null $DMJSON.currentScheduleID) # complete current mission, if it exists
        $boMenuJSON.contentDay = ^increment_content_day() # jump to next content day
        $DMJSON.currentContentID = ^get_next_content_id(DM) # grab oldest available mission, if we have one
        # if we have an available mission, load it up    
        # so we can complete it immedaitely and move on
        if ($DMJSON.currentContentID != null){
            ^DM_Constructor()
        }
        # if this new mission has a different theme set index, then we've jumped to the next theme successfully
        if($DMJSON.MissionSet != $_currThemeSet AND $DMJSON.currentContentID != null){
            $_callMission = true
            ^end(LOOP)
        }
        # else if we're past content day 60, then we've skipped/completed all the missions
        else if($boMenuJSON.contentDay > 60){
            ^end(LOOP)
        }
    }
    # offer the mission we found that's part of a new theme set
    if($_callMission == true){
        ^DM_missionMUX()
    }

u: DEBUG_COMPLETE_MISSION_SET (debug complete mission set _~integer)
    $_mission_set = ^pickDBEntry(DM_Index MissionTheme Week _0 * * * *)
    if($_mission_set)
    {
        $_res = ^eb_complete_mission_set($_mission_set)
        Completed mission set $_mission_set
    }
    else
    {
        could not find mission set with Week index _0
    }

# complete current mission and say the mission index out loud
u: DEBUG_COMPLETE_MISSION (debug complete mission)
    completed mission $DMJSON.MissionSet $DMJSON.MissionIDX
    if($DMJSON.Type == FETCH1){
        part one
    }
    else if($DMJSON.Type == FETCH2){
        part two
    }
    ^DM_endMission()

# complete current mission and say the mission index out loud
u: DEBUG_COMPLETE_ALL (debug complete all missions)
    Completing every single daily mission
    ^eb_complete_all_missions()

u: DEBUG_START_MISSION (debug call [mission Mission] controller)
    Calling mission controller directly.
    ^DM_controller( null )
